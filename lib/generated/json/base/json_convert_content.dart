// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:savekartweb/domain/banner_entity.dart';
import 'package:savekartweb/domain/cart_data_entity.dart';
import 'package:savekartweb/domain/cart_data_exist_entity.dart';
import 'package:savekartweb/domain/category_list_entity.dart';
import 'package:savekartweb/domain/check_wish_list_entity.dart';
import 'package:savekartweb/domain/order_entity.dart';
import 'package:savekartweb/domain/product_count_entity.dart';
import 'package:savekartweb/domain/product_stock_entity.dart';
import 'package:savekartweb/domain/product_with_category_entity.dart';
import 'package:savekartweb/domain/products_entity.dart';
import 'package:savekartweb/domain/profile_data_entity.dart';
import 'package:savekartweb/domain/return_policy_entity.dart';
import 'package:savekartweb/domain/search_products_entity.dart';
import 'package:savekartweb/domain/user_address_entity.dart';
import 'package:savekartweb/domain/wallet_balance_entity.dart';
import 'package:savekartweb/domain/wallet_list_entity.dart';
import 'package:savekartweb/domain/wishlist_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<BannerEntity>[] is M) {
      return data.map<BannerEntity>((Map<String, dynamic> e) =>
          BannerEntity.fromJson(e)).toList() as M;
    }
    if (<BannerData>[] is M) {
      return data.map<BannerData>((Map<String, dynamic> e) =>
          BannerData.fromJson(e)).toList() as M;
    }
    if (<CartDataEntity>[] is M) {
      return data.map<CartDataEntity>((Map<String, dynamic> e) =>
          CartDataEntity.fromJson(e)).toList() as M;
    }
    if (<CartDataData>[] is M) {
      return data.map<CartDataData>((Map<String, dynamic> e) =>
          CartDataData.fromJson(e)).toList() as M;
    }
    if (<CartDataExistEntity>[] is M) {
      return data.map<CartDataExistEntity>((Map<String, dynamic> e) =>
          CartDataExistEntity.fromJson(e)).toList() as M;
    }
    if (<CartDataExistData>[] is M) {
      return data.map<CartDataExistData>((Map<String, dynamic> e) =>
          CartDataExistData.fromJson(e)).toList() as M;
    }
    if (<CategoryListEntity>[] is M) {
      return data.map<CategoryListEntity>((Map<String, dynamic> e) =>
          CategoryListEntity.fromJson(e)).toList() as M;
    }
    if (<CategoryListData>[] is M) {
      return data.map<CategoryListData>((Map<String, dynamic> e) =>
          CategoryListData.fromJson(e)).toList() as M;
    }
    if (<CategoryListDataCategory>[] is M) {
      return data.map<CategoryListDataCategory>((Map<String, dynamic> e) =>
          CategoryListDataCategory.fromJson(e)).toList() as M;
    }
    if (<CategoryListDataSubCategory>[] is M) {
      return data.map<CategoryListDataSubCategory>((Map<String, dynamic> e) =>
          CategoryListDataSubCategory.fromJson(e)).toList() as M;
    }
    if (<CheckWishListEntity>[] is M) {
      return data.map<CheckWishListEntity>((Map<String, dynamic> e) =>
          CheckWishListEntity.fromJson(e)).toList() as M;
    }
    if (<CheckWishListData>[] is M) {
      return data.map<CheckWishListData>((Map<String, dynamic> e) =>
          CheckWishListData.fromJson(e)).toList() as M;
    }
    if (<OrderEntity>[] is M) {
      return data.map<OrderEntity>((Map<String, dynamic> e) =>
          OrderEntity.fromJson(e)).toList() as M;
    }
    if (<OrderData>[] is M) {
      return data.map<OrderData>((Map<String, dynamic> e) =>
          OrderData.fromJson(e)).toList() as M;
    }
    if (<OrderDataCartOrder>[] is M) {
      return data.map<OrderDataCartOrder>((Map<String, dynamic> e) =>
          OrderDataCartOrder.fromJson(e)).toList() as M;
    }
    if (<OrderDataCartStock>[] is M) {
      return data.map<OrderDataCartStock>((Map<String, dynamic> e) =>
          OrderDataCartStock.fromJson(e)).toList() as M;
    }
    if (<OrderDataCartProduct>[] is M) {
      return data.map<OrderDataCartProduct>((Map<String, dynamic> e) =>
          OrderDataCartProduct.fromJson(e)).toList() as M;
    }
    if (<OrderDataCartReturnRequests>[] is M) {
      return data.map<OrderDataCartReturnRequests>((Map<String, dynamic> e) =>
          OrderDataCartReturnRequests.fromJson(e)).toList() as M;
    }
    if (<OrderDataPaymentDetails>[] is M) {
      return data.map<OrderDataPaymentDetails>((Map<String, dynamic> e) =>
          OrderDataPaymentDetails.fromJson(e)).toList() as M;
    }
    if (<ProductCountEntity>[] is M) {
      return data.map<ProductCountEntity>((Map<String, dynamic> e) =>
          ProductCountEntity.fromJson(e)).toList() as M;
    }
    if (<ProductCountData>[] is M) {
      return data.map<ProductCountData>((Map<String, dynamic> e) =>
          ProductCountData.fromJson(e)).toList() as M;
    }
    if (<ProductStockEntity>[] is M) {
      return data.map<ProductStockEntity>((Map<String, dynamic> e) =>
          ProductStockEntity.fromJson(e)).toList() as M;
    }
    if (<ProductStockData>[] is M) {
      return data.map<ProductStockData>((Map<String, dynamic> e) =>
          ProductStockData.fromJson(e)).toList() as M;
    }
    if (<ProductWithCategoryEntity>[] is M) {
      return data.map<ProductWithCategoryEntity>((Map<String, dynamic> e) =>
          ProductWithCategoryEntity.fromJson(e)).toList() as M;
    }
    if (<ProductWithCategoryData>[] is M) {
      return data.map<ProductWithCategoryData>((Map<String, dynamic> e) =>
          ProductWithCategoryData.fromJson(e)).toList() as M;
    }
    if (<ProductWithCategoryDataCategory>[] is M) {
      return data.map<ProductWithCategoryDataCategory>((
          Map<String, dynamic> e) =>
          ProductWithCategoryDataCategory.fromJson(e)).toList() as M;
    }
    if (<ProductWithCategoryDataData>[] is M) {
      return data.map<ProductWithCategoryDataData>((Map<String, dynamic> e) =>
          ProductWithCategoryDataData.fromJson(e)).toList() as M;
    }
    if (<ProductsEntity>[] is M) {
      return data.map<ProductsEntity>((Map<String, dynamic> e) =>
          ProductsEntity.fromJson(e)).toList() as M;
    }
    if (<ProductsData>[] is M) {
      return data.map<ProductsData>((Map<String, dynamic> e) =>
          ProductsData.fromJson(e)).toList() as M;
    }
    if (<ProfileDataEntity>[] is M) {
      return data.map<ProfileDataEntity>((Map<String, dynamic> e) =>
          ProfileDataEntity.fromJson(e)).toList() as M;
    }
    if (<ProfileDataData>[] is M) {
      return data.map<ProfileDataData>((Map<String, dynamic> e) =>
          ProfileDataData.fromJson(e)).toList() as M;
    }
    if (<ReturnPolicyEntity>[] is M) {
      return data.map<ReturnPolicyEntity>((Map<String, dynamic> e) =>
          ReturnPolicyEntity.fromJson(e)).toList() as M;
    }
    if (<ReturnPolicyData>[] is M) {
      return data.map<ReturnPolicyData>((Map<String, dynamic> e) =>
          ReturnPolicyData.fromJson(e)).toList() as M;
    }
    if (<SearchProductsEntity>[] is M) {
      return data.map<SearchProductsEntity>((Map<String, dynamic> e) =>
          SearchProductsEntity.fromJson(e)).toList() as M;
    }
    if (<SearchProductsData>[] is M) {
      return data.map<SearchProductsData>((Map<String, dynamic> e) =>
          SearchProductsData.fromJson(e)).toList() as M;
    }
    if (<UserAddressEntity>[] is M) {
      return data.map<UserAddressEntity>((Map<String, dynamic> e) =>
          UserAddressEntity.fromJson(e)).toList() as M;
    }
    if (<UserAddressData>[] is M) {
      return data.map<UserAddressData>((Map<String, dynamic> e) =>
          UserAddressData.fromJson(e)).toList() as M;
    }
    if (<WalletBalanceEntity>[] is M) {
      return data.map<WalletBalanceEntity>((Map<String, dynamic> e) =>
          WalletBalanceEntity.fromJson(e)).toList() as M;
    }
    if (<WalletBalanceData>[] is M) {
      return data.map<WalletBalanceData>((Map<String, dynamic> e) =>
          WalletBalanceData.fromJson(e)).toList() as M;
    }
    if (<WalletListEntity>[] is M) {
      return data.map<WalletListEntity>((Map<String, dynamic> e) =>
          WalletListEntity.fromJson(e)).toList() as M;
    }
    if (<WalletListData>[] is M) {
      return data.map<WalletListData>((Map<String, dynamic> e) =>
          WalletListData.fromJson(e)).toList() as M;
    }
    if (<WishlistEntity>[] is M) {
      return data.map<WishlistEntity>((Map<String, dynamic> e) =>
          WishlistEntity.fromJson(e)).toList() as M;
    }
    if (<WishlistData>[] is M) {
      return data.map<WishlistData>((Map<String, dynamic> e) =>
          WishlistData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (BannerEntity).toString(): BannerEntity.fromJson,
    (BannerData).toString(): BannerData.fromJson,
    (CartDataEntity).toString(): CartDataEntity.fromJson,
    (CartDataData).toString(): CartDataData.fromJson,
    (CartDataExistEntity).toString(): CartDataExistEntity.fromJson,
    (CartDataExistData).toString(): CartDataExistData.fromJson,
    (CategoryListEntity).toString(): CategoryListEntity.fromJson,
    (CategoryListData).toString(): CategoryListData.fromJson,
    (CategoryListDataCategory).toString(): CategoryListDataCategory.fromJson,
    (CategoryListDataSubCategory).toString(): CategoryListDataSubCategory
        .fromJson,
    (CheckWishListEntity).toString(): CheckWishListEntity.fromJson,
    (CheckWishListData).toString(): CheckWishListData.fromJson,
    (OrderEntity).toString(): OrderEntity.fromJson,
    (OrderData).toString(): OrderData.fromJson,
    (OrderDataCartOrder).toString(): OrderDataCartOrder.fromJson,
    (OrderDataCartStock).toString(): OrderDataCartStock.fromJson,
    (OrderDataCartProduct).toString(): OrderDataCartProduct.fromJson,
    (OrderDataCartReturnRequests).toString(): OrderDataCartReturnRequests
        .fromJson,
    (OrderDataPaymentDetails).toString(): OrderDataPaymentDetails.fromJson,
    (ProductCountEntity).toString(): ProductCountEntity.fromJson,
    (ProductCountData).toString(): ProductCountData.fromJson,
    (ProductStockEntity).toString(): ProductStockEntity.fromJson,
    (ProductStockData).toString(): ProductStockData.fromJson,
    (ProductWithCategoryEntity).toString(): ProductWithCategoryEntity.fromJson,
    (ProductWithCategoryData).toString(): ProductWithCategoryData.fromJson,
    (ProductWithCategoryDataCategory)
        .toString(): ProductWithCategoryDataCategory.fromJson,
    (ProductWithCategoryDataData).toString(): ProductWithCategoryDataData
        .fromJson,
    (ProductsEntity).toString(): ProductsEntity.fromJson,
    (ProductsData).toString(): ProductsData.fromJson,
    (ProfileDataEntity).toString(): ProfileDataEntity.fromJson,
    (ProfileDataData).toString(): ProfileDataData.fromJson,
    (ReturnPolicyEntity).toString(): ReturnPolicyEntity.fromJson,
    (ReturnPolicyData).toString(): ReturnPolicyData.fromJson,
    (SearchProductsEntity).toString(): SearchProductsEntity.fromJson,
    (SearchProductsData).toString(): SearchProductsData.fromJson,
    (UserAddressEntity).toString(): UserAddressEntity.fromJson,
    (UserAddressData).toString(): UserAddressData.fromJson,
    (WalletBalanceEntity).toString(): WalletBalanceEntity.fromJson,
    (WalletBalanceData).toString(): WalletBalanceData.fromJson,
    (WalletListEntity).toString(): WalletListEntity.fromJson,
    (WalletListData).toString(): WalletListData.fromJson,
    (WishlistEntity).toString(): WishlistEntity.fromJson,
    (WishlistData).toString(): WishlistData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}